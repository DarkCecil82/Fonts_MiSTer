using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;

namespace Txt2Pf
{
  class Program
  {
    static void Main(string[] args)
    {
      var directory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
      const int highestChar = '\x8d';

      foreach (var filePath in Directory.GetFiles(directory, "*.txt"))
      {
        Console.WriteLine("Reading file \"{0}\"", Path.GetFileName(filePath));

        using (var sr = new StreamReader(filePath))
        {
          char currentCharacter = '\0';
          bool hasCharacter = false;
          var firstCharacter = '\xff';
          var lastCharacter = '\0';
          var row = 0;

          string s;

          var array = new byte[256 * 8];

          while ((s = sr.ReadLine()) != null)
          {
            if (s.StartsWith("U+", StringComparison.OrdinalIgnoreCase))
            {
              if (int.TryParse(s.Substring(2, 4), NumberStyles.HexNumber, new NumberFormatInfo(), out var r) && r < 142)
              {
                currentCharacter = (char)r;
                hasCharacter = true;
                row = 0;
              }
            }
            else if (hasCharacter && row < 8 && s.Length >= 8 && s.Substring(0, 8).All(c => c == '.' || c == '#'))
            {
              if (currentCharacter < firstCharacter)
                firstCharacter = currentCharacter;
              else if (currentCharacter > lastCharacter)
                lastCharacter = currentCharacter;

              var b =
                (s[0] == '#' ? 0x80 : 0) |
                (s[1] == '#' ? 0x40 : 0) |
                (s[2] == '#' ? 0x20 : 0) |
                (s[3] == '#' ? 0x10 : 0) |
                (s[4] == '#' ? 0x08 : 0) |
                (s[5] == '#' ? 0x04 : 0) |
                (s[6] == '#' ? 0x02 : 0) |
                (s[7] == '#' ? 0x01 : 0);

              array[currentCharacter << 3 | row] = (byte)b;

              row++;
            }
          }

          var noSmallLetters = array.Skip(8 * 'a').Take(8 * ('z' - 'a')).Sum(n => (int)n) == 0;

          for (var i = 0; i < highestChar; i++)
          {
            if (array.Skip(i * 8).Take(8).Sum(n => (int) n) > 0) continue;

            if (i >= 'a' && i <= 'z' && noSmallLetters)
            {
              for (var j = 0; j < 8; j++)
                array[i * 8 + j] = array[(i - 'a' + 'A') * 8 + j];
              continue;
            }

            for (var j = 0; j < 8; j++)
            {
              var c =
                ((Charfont[i, 0] >> j & 1) << 7) |
                ((Charfont[i, 1] >> j & 1) << 6) |
                ((Charfont[i, 2] >> j & 1) << 5) |
                ((Charfont[i, 3] >> j & 1) << 4) |
                ((Charfont[i, 4] >> j & 1) << 3) |
                ((Charfont[i, 5] >> j & 1) << 2) |
                ((Charfont[i, 6] >> j & 1) << 1) |
                ((Charfont[i, 7] >> j & 1) << 0);

              array[i * 8 + j] = (byte)c;
            }
          }

          var pfDirectory = Path.Combine(directory, "output");
          if (!Directory.Exists(pfDirectory))
            Directory.CreateDirectory(pfDirectory);
          var pfPath = Path.Combine(pfDirectory, Path.GetFileNameWithoutExtension(filePath) + ".pf");

          using (var bs = new FileStream(pfPath, FileMode.OpenOrCreate, FileAccess.Write))
          {
            Console.WriteLine("Writing file \"{0}\"", Path.GetFileName(pfPath));

            if (firstCharacter >= ' ' && lastCharacter <= '\x80')
            {
              bs.SetLength(96 * 8);
              using (var bw = new BinaryWriter(bs))
              {
                bw.Write(array, 32 * 8, 96 * 8);
              }
            }
            else if (firstCharacter < ' ' && lastCharacter <= '\x80')
            {
              bs.SetLength(96 * 8);
              using (var bw = new BinaryWriter(bs))
              {
                bw.Write(array, 0, 128 * 8);
              }
            }
            else
            {
              bs.SetLength(96 * 8);
              using (var bw = new BinaryWriter(bs))
              {
                bw.Write(array, 0, 142 * 8);
              }
            }
          }
        }
      }
    }

    private static readonly byte[,] Charfont = {
      { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },         // 0    [0x0]
	  { 0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55 },         // 1    [0x1]
	  { 0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A },         // 2    [0x2]
	  { 0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14 },         // 3    [0x3]
	  { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },         // 4    [0x4]
	  { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },         // 5    [0x5]
	  { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },         // 6    [0x6]
	  { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },         // 7    [0x7]
	  { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },         // 8    [0x8]
	  { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },         // 9    [0x9]
	  { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },         // 10   [0xa]
	  { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },         // 11   [0xb]
	  { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },         // 12   [0xc]
	  { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },         // 13   [0xd]
	  { 0x00,0xc0,0xc0,0xe0,0x78,0x1f,0x00,0xff },         // 14   [0xe] atari logo left
	  { 0xff,0x00,0x1f,0x78,0xe0,0xc0,0xc0,0x00 },         // 15   [0xf] atari logo right
	  { 0x08,0x08,0x1C,0x1C,0x3E,0x3E,0x7F,0x7F },         // 16   [0x10] arrow left
	  { 0x7F,0x7F,0x3E,0x3E,0x1C,0x1C,0x08,0x08 },         // 17   [0x11] arrow right
	  { 0x00,0x10,0x18,0x7c,0x7c,0x18,0x10,0x00 },         // 18   [0x12] arrow up
	  { 0x00,0x10,0x30,0x7c,0x7c,0x30,0x10,0x00 },         // 19   [0x13] arrow down
	  { 0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x00,0x00 },         // 20   [0x14]
	  { 0x00,0x00,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C },         // 21   [0x15]
	  { 0x00,0x7C,0x7C,0x38,0x38,0x10,0x10,0x00 },         // 22   [0x16] mini arrow right
	  { 0x70,0x7c,0x72,0x72,0x72,0x7c,0x70,0x00 },         // 23   [0x17] write protect
	  { 0x70,0x70,0x70,0x70,0x7c,0x72,0x02,0x0c },         // 24   [0x18] write enable
	  { 0x3e,0x3e,0x22,0x22,0x22,0x3e,0x3e,0x00 },         // 25   [0x19] unchecked checkbox
	  { 0x3e,0x3e,0x3e,0x3e,0x3e,0x3e,0x3e,0x00 },         // 26   [0x1a] checked checkbox
	  { 0x00,0x00,0x00,0x0c,0x0c,0x00,0x00,0x00 },         // 27   [0x1b] middle dot
	  { 0x68,0x78,0x6b,0x0f,0x6b,0x78,0x68,0x00 },         // 28   [0x1c] ethernet
	  { 0x02,0x09,0x25,0x95,0x95,0x25,0x09,0x02 },         // 29   [0x1d] wifi
	  { 0x00,0x90,0xD8,0x7C,0x3E,0x1B,0x09,0x00 },         // 30   [0x1e] charge
	  { 0x7E,0x72,0x73,0x73,0x73,0x72,0x7E,0x00 },         // 31   [0x1f] battery
	  { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },         // 32   [0x20]
	  { 0x00,0x00,0x00,0x5F,0x5F,0x00,0x00,0x00 },         // 33   [0x21]
	  { 0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x00 },         // 34   [0x22]
	  { 0x14,0x7F,0x7F,0x14,0x7F,0x7F,0x14,0x00 },         // 35   [0x23]
	  { 0x00,0x24,0x2E,0x6B,0x6B,0x3A,0x12,0x00 },         // 36   [0x24]
	  { 0x4C,0x6A,0x36,0x18,0x6C,0x56,0x32,0x00 },         // 37   [0x25]
	  { 0x30,0x7E,0x4F,0x59,0x77,0x3A,0x68,0x40 },         // 38   [0x26]
	  { 0x00,0x00,0x04,0x07,0x03,0x00,0x00,0x00 },         // 39   [0x27]
	  { 0x00,0x00,0x1C,0x3E,0x63,0x41,0x00,0x00 },         // 40   [0x28]
	  { 0x00,0x00,0x41,0x63,0x3E,0x1C,0x00,0x00 },         // 41   [0x29]
	  { 0x08,0x2A,0x3E,0x1C,0x1C,0x3E,0x2A,0x08 },         // 42   [0x2a]
	  { 0x00,0x08,0x08,0x3E,0x3E,0x08,0x08,0x00 },         // 43   [0x2b]
	  { 0x00,0x00,0x80,0xE0,0x60,0x00,0x00,0x00 },         // 44   [0x2c]
	  { 0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x00 },         // 45   [0x2d]
	  { 0x00,0x00,0x00,0x60,0x60,0x00,0x00,0x00 },         // 46   [0x2e]
	  { 0x40,0x60,0x30,0x18,0x0C,0x06,0x03,0x01 },         // 47   [0x2f]
	  { 0x00,0x3E,0x7F,0x59,0x4D,0x7F,0x3E,0x00 },         // 48   [0x30]
	  { 0x00,0x04,0x06,0x7F,0x7F,0x00,0x00,0x00 },         // 49   [0x31]
	  { 0x00,0x42,0x63,0x71,0x59,0x4F,0x46,0x00 },         // 50   [0x32]
	  { 0x00,0x22,0x63,0x49,0x49,0x7F,0x36,0x00 },         // 51   [0x33]
	  { 0x18,0x1C,0x16,0x13,0x7F,0x7F,0x10,0x00 },         // 52   [0x34]
	  { 0x00,0x27,0x67,0x45,0x45,0x7D,0x39,0x00 },         // 53   [0x35]
	  { 0x00,0x3C,0x7E,0x4B,0x49,0x79,0x30,0x00 },         // 54   [0x36]
	  { 0x00,0x01,0x01,0x71,0x79,0x0F,0x07,0x00 },         // 55   [0x37]
	  { 0x00,0x36,0x7F,0x49,0x49,0x7F,0x36,0x00 },         // 56   [0x38]
	  { 0x00,0x06,0x4F,0x49,0x69,0x3F,0x1E,0x00 },         // 57   [0x39]
	  { 0x00,0x00,0x00,0x66,0x66,0x00,0x00,0x00 },         // 58   [0x3a]
	  { 0x00,0x00,0x80,0xE6,0x66,0x00,0x00,0x00 },         // 59   [0x3b]
	  { 0x00,0x08,0x08,0x14,0x14,0x22,0x22,0x00 },         // 60   [0x3c]
	  { 0x00,0x14,0x14,0x14,0x14,0x14,0x14,0x00 },         // 61   [0x3d]
	  { 0x00,0x22,0x22,0x14,0x14,0x08,0x08,0x00 },         // 62   [0x3e]
	  { 0x00,0x02,0x03,0x51,0x59,0x0F,0x06,0x00 },         // 63   [0x3f]
	  { 0x3E,0x7F,0x41,0x5D,0x55,0x1F,0x1E,0x00 },         // 64   [0x40]
	  { 0x00,0x7E,0x7F,0x09,0x09,0x7F,0x7E,0x00 },         // 65   [0x41]
	  { 0x00,0x7F,0x7F,0x49,0x49,0x7F,0x36,0x00 },         // 66   [0x42]
	  { 0x00,0x1C,0x3E,0x63,0x41,0x41,0x41,0x00 },         // 67   [0x43]
	  { 0x00,0x7F,0x7F,0x41,0x63,0x3E,0x1C,0x00 },         // 68   [0x44]
	  { 0x00,0x7F,0x7F,0x49,0x49,0x41,0x41,0x00 },         // 69   [0x45]
	  { 0x00,0x7F,0x7F,0x09,0x09,0x01,0x01,0x00 },         // 70   [0x46]
	  { 0x00,0x3E,0x7F,0x41,0x49,0x7B,0x7A,0x00 },         // 71   [0x47]
	  { 0x00,0x7F,0x7F,0x08,0x08,0x7F,0x7F,0x00 },         // 72   [0x48]
	  { 0x00,0x00,0x41,0x7F,0x7F,0x41,0x00,0x00 },         // 73   [0x49]
	  { 0x00,0x20,0x60,0x40,0x40,0x7F,0x3F,0x00 },         // 74   [0x4a]
	  { 0x7F,0x7F,0x08,0x1C,0x36,0x63,0x41,0x00 },         // 75   [0x4b]
	  { 0x00,0x7F,0x7F,0x40,0x40,0x40,0x40,0x00 },         // 76   [0x4c]
	  { 0x7F,0x7F,0x06,0x0C,0x06,0x7F,0x7F,0x00 },         // 77   [0x4d]
	  { 0x7F,0x7F,0x06,0x0C,0x18,0x7F,0x7F,0x00 },         // 78   [0x4e]
	  { 0x00,0x3E,0x7F,0x41,0x41,0x7F,0x3E,0x00 },         // 79   [0x4f]
	  { 0x00,0x7F,0x7F,0x09,0x09,0x0F,0x06,0x00 },         // 80   [0x50]
	  { 0x3E,0x7F,0x41,0x61,0x7F,0x7E,0x40,0x00 },         // 81   [0x51]
	  { 0x00,0x7F,0x7F,0x09,0x19,0x7F,0x66,0x00 },         // 82   [0x52]
	  { 0x00,0x26,0x6F,0x4D,0x59,0x7B,0x32,0x00 },         // 83   [0x53]
	  { 0x00,0x01,0x01,0x7F,0x7F,0x01,0x01,0x00 },         // 84   [0x54]
	  { 0x00,0x3F,0x7F,0x40,0x40,0x7F,0x3F,0x00 },         // 85   [0x55]
	  { 0x00,0x0F,0x3F,0x70,0x70,0x3F,0x0F,0x00 },         // 86   [0x56]
	  { 0x7F,0x7F,0x30,0x18,0x30,0x7F,0x7F,0x00 },         // 87   [0x57]
	  { 0x41,0x63,0x36,0x1C,0x1C,0x36,0x63,0x41 },         // 88   [0x58]
	  { 0x01,0x03,0x06,0x7C,0x7C,0x06,0x03,0x01 },         // 89   [0x59]
	  { 0x61,0x71,0x59,0x4D,0x47,0x43,0x41,0x00 },         // 90   [0x5a]
	  { 0x00,0x00,0x7F,0x7F,0x41,0x41,0x00,0x00 },         // 91   [0x5b]
	  { 0x01,0x03,0x06,0x0C,0x18,0x30,0x60,0x40 },         // 92   [0x5c]
	  { 0x00,0x00,0x41,0x41,0x7F,0x7F,0x00,0x00 },         // 93   [0x5d]
	  { 0x08,0x0C,0x06,0x03,0x06,0x0C,0x08,0x00 },         // 94   [0x5e]
	  { 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00 },         // 95   [0x5f]
	  { 0x00,0x00,0x00,0x03,0x07,0x04,0x00,0x00 },         // 96   [0x60]
	  { 0x00,0x20,0x74,0x54,0x54,0x7C,0x78,0x00 },         // 97   [0x61]
	  { 0x00,0x7F,0x7F,0x44,0x44,0x7C,0x38,0x00 },         // 98   [0x62]
	  { 0x00,0x38,0x7C,0x44,0x44,0x44,0x00,0x00 },         // 99   [0x63]
	  { 0x00,0x38,0x7C,0x44,0x44,0x7F,0x7F,0x00 },         // 100  [0x64]
	  { 0x00,0x38,0x7C,0x54,0x54,0x5C,0x18,0x00 },         // 101  [0x65]
	  { 0x00,0x04,0x7E,0x7F,0x05,0x05,0x00,0x00 },         // 102  [0x66]
	  { 0x00,0x18,0xBC,0xA4,0xA4,0xFC,0x7C,0x00 },         // 103  [0x67]
	  { 0x00,0x7F,0x7F,0x04,0x04,0x7C,0x78,0x00 },         // 104  [0x68]
	  { 0x00,0x00,0x00,0x3D,0x7D,0x40,0x00,0x00 },         // 105  [0x69]
	  { 0x00,0x80,0x80,0x80,0xFD,0x7D,0x00,0x00 },         // 106  [0x6a]
	  { 0x00,0x7F,0x7F,0x10,0x38,0x6C,0x44,0x00 },         // 107  [0x6b]
	  { 0x00,0x00,0x00,0x3F,0x7F,0x40,0x00,0x00 },         // 108  [0x6c]
	  { 0x7C,0x7C,0x0C,0x18,0x0C,0x7C,0x78,0x00 },         // 109  [0x6d]
	  { 0x00,0x7C,0x7C,0x04,0x04,0x7C,0x78,0x00 },         // 110  [0x6e]
	  { 0x00,0x38,0x7C,0x44,0x44,0x7C,0x38,0x00 },         // 111  [0x6f]
	  { 0x00,0xFC,0xFC,0x24,0x24,0x3C,0x18,0x00 },         // 112  [0x70]
	  { 0x00,0x18,0x3C,0x24,0x24,0xFC,0xFC,0x00 },         // 113  [0x71]
	  { 0x00,0x7C,0x7C,0x04,0x04,0x0C,0x08,0x00 },         // 114  [0x72]
	  { 0x00,0x48,0x5C,0x54,0x54,0x74,0x20,0x00 },         // 115  [0x73]
	  { 0x00,0x04,0x3F,0x7F,0x44,0x44,0x00,0x00 },         // 116  [0x74]
	  { 0x00,0x3C,0x7C,0x40,0x40,0x7C,0x7C,0x00 },         // 117  [0x75]
	  { 0x00,0x1C,0x3C,0x60,0x60,0x3C,0x1C,0x00 },         // 118  [0x76]
	  { 0x3C,0x7C,0x60,0x30,0x60,0x7C,0x3C,0x00 },         // 119  [0x77]
	  { 0x44,0x6C,0x38,0x10,0x38,0x6C,0x44,0x00 },         // 120  [0x78]
	  { 0x00,0x1C,0xBC,0xE0,0x60,0x3C,0x1C,0x00 },         // 121  [0x79]
	  { 0x00,0x44,0x64,0x74,0x5C,0x4C,0x44,0x00 },         // 122  [0x7a]
	  { 0x00,0x08,0x08,0x3E,0x77,0x41,0x41,0x00 },         // 123  [0x7b]
	  { 0x00,0x00,0x00,0x7F,0x7F,0x00,0x00,0x00 },         // 124  [0x7c]
	  { 0x00,0x41,0x41,0x77,0x3E,0x08,0x08,0x00 },         // 125  [0x7d]
	  { 0x02,0x01,0x01,0x03,0x02,0x02,0x01,0x00 },         // 126  [0x7e]
	  { 0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x00 },         // 127  [0x7f]

	  //dotted frame
	  { 0x00,0x00,0x00,0xA8,0x00,0x08,0x00,0x08 },         // 128  [0x80] TL
	  { 0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08 },         // 129  [0x81] T/B
	  { 0x00,0x08,0x00,0xA8,0x00,0x00,0x00,0x00 },         // 130  [0x82] TR
	  { 0x00,0x00,0x00,0xAA,0x00,0x00,0x00,0x00 },         // 131  [0x83] L/R
	  { 0x00,0x08,0x00,0x0A,0x00,0x00,0x00,0x00 },         // 132  [0x84] BR
	  { 0x00,0x00,0x00,0x0A,0x00,0x08,0x00,0x08 },         // 133  [0x85] BL

	  //solid frame
	  { 0x00,0x00,0x00,0xF8,0x08,0x08,0x08,0x08 },         // 134  [0x86] TL
	  { 0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08 },         // 135  [0x87] T/B
	  { 0x08,0x08,0x08,0xF8,0x00,0x00,0x00,0x00 },         // 136  [0x88] TR
	  { 0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00 },         // 137  [0x89] L/R
	  { 0x08,0x08,0x08,0x0F,0x00,0x00,0x00,0x00 },         // 138  [0x8A] BR
	  { 0x00,0x00,0x00,0x0F,0x08,0x08,0x08,0x08 },         // 139  [0x8B] BL

	  { 0x7F,0x41,0x41,0x41,0x41,0x41,0x7F,0x00 },         // 140  [0x8C] empty square
	  { 0x1C,0x1C,0x3E,0x7F,0x00,0x2A,0x49,0x00 },         // 141  [0x8D] speaker
    };
  }
}
